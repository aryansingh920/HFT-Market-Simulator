import mplfinance as mpf
import pandas as pd
import dash
from dash import dcc, html
import plotly.graph_objs as go


def read_and_resample_ohlc(symbol_csv_path, freq='1ms'):
    """
    Reads a symbol-specific CSV (e.g., 'symbol_AAPL.csv') generated by the simulator,
    filters snapshots, and resamples the 'mid_price' into OHLC data.
    
    :param symbol_csv_path: Path to the CSV file like 'symbol_AAPL.csv'.
    :param freq: Resampling frequency, e.g. '1ms', '1S', '1Min'.
    :return: A Pandas DataFrame with columns: [Open, High, Low, Close], indexed by datetime.
    """
    # Read CSV
    df = pd.read_csv(symbol_csv_path)

    # Filter snapshots only (since we'll derive mid_price from them)
    snapshot_df = df[df['event_type'] == 'SNAPSHOT'].copy()
    if snapshot_df.empty:
        raise ValueError(f"No SNAPSHOT data found in {symbol_csv_path}.")

    # Convert timestamp to datetime (unit='s' for seconds; fractional part = sub-second)
    snapshot_df['datetime'] = pd.to_datetime(
        snapshot_df['timestamp'], unit='s')
    snapshot_df.set_index('datetime', inplace=True)

    # Resample mid_price -> OHLC
    ohlc_df = snapshot_df['mid_price'].resample(freq).agg({
        'Open': 'first',
        'High': 'max',
        'Low': 'min',
        'Close': 'last'
    })
    ohlc_df.dropna(inplace=True)  # remove intervals with no data
    return ohlc_df


def create_candlestick_figure(ohlc_df):
    """
    Given a DataFrame with [Open, High, Low, Close] columns, return a Plotly candlestick figure.
    """
    fig = go.Figure(data=[go.Candlestick(
        x=ohlc_df.index,
        open=ohlc_df['Open'],
        high=ohlc_df['High'],
        low=ohlc_df['Low'],
        close=ohlc_df['Close'],
        increasing_line_color='green',
        decreasing_line_color='red',
        name='Candlestick'
    )])
    fig.update_layout(
        xaxis_title='Time',
        yaxis_title='Price',
        hovermode='x unified',   # helps unify hover info on one vertical line
        title='Candlestick Chart (Resampled)'
    )
    return fig


def create_dash_app(symbol_csv='symbol_AAPL.csv', freq='1ms'):
    """
    Creates and returns a Dash application that displays a candlestick chart
    from the given CSV at the specified resampling frequency.
    """
    # Prepare data
    try:
        ohlc_df = read_and_resample_ohlc(symbol_csv, freq=freq)
    except ValueError as e:
        print(e)
        # Return a minimal app that just says "No data"
        app = dash.Dash(__name__)
        app.layout = html.Div([html.H3(str(e))])
        return app

    # Build candlestick figure
    fig = create_candlestick_figure(ohlc_df)

    # Create Dash app
    app = dash.Dash(__name__)
    app.layout = html.Div([
        html.H1(f"Candlestick for {symbol_csv} at {freq} intervals"),
        dcc.Graph(
            id='candlestick-graph',
            figure=fig
        )
    ])
    return app


def plot_symbol_candlestick(symbol_csv_path, freq='1ms'):
    """
    Reads a symbol-specific CSV (e.g., 'symbol_AAPL.csv') generated by the simulator
    and plots a candlestick chart using mplfinance, supporting millisecond-level 
    resampling if the timestamps have sufficient precision.
    
    :param symbol_csv_path: Path to the 'symbol_<SYMBOL>.csv' file.
    :param freq: Resampling frequency (e.g., '1ms', '10ms', '1S', '1Min', etc.).
    """
    # 1) Read the CSV into a DataFrame
    df = pd.read_csv(symbol_csv_path)

    # 2) Filter for snapshot events only (we'll use 'mid_price' for synthetic OHLC)
    snapshot_df = df[df['event_type'] == 'SNAPSHOT'].copy()
    if snapshot_df.empty:
        print(f"No SNAPSHOT data found in {symbol_csv_path}.")
        return

    # 3) Convert timestamps to datetime.
    #    The 'unit="s"' argument interprets the numeric timestamp as seconds.
    #    Pandas can handle sub-second precision if the float is precise enough.
    snapshot_df['datetime'] = pd.to_datetime(
        snapshot_df['timestamp'], unit='s')
    snapshot_df.set_index('datetime', inplace=True)

    # 4) Resample 'mid_price' to create synthetic OHLC data
    #    (Open, High, Low, Close) in each interval
    ohlc_df = snapshot_df['mid_price'].resample(freq).agg({
        'Open': 'first',
        'High': 'max',
        'Low': 'min',
        'Close': 'last'
    })

    # 5) Drop empty intervals
    ohlc_df.dropna(inplace=True)

    # 6) Create a dummy 'Volume' column if you want a volume subplot
    ohlc_df['Volume'] = 0

    # 7) Prepare a title
    symbol_name = symbol_csv_path.split('symbol_')[-1].replace('.csv', '')
    title = f"Candlestick for {symbol_name.upper()} [{freq} resample]"

    # 8) Plot with mplfinance
    mpf.plot(
        ohlc_df,
        type='candle',
        volume=True,         # show a volume subplot (though it's all zeros)
        mav=(3, 6, 9),       # example moving averages
        title=title,
        ylabel='Price',
        ylabel_lower='Volume',
        style='yahoo'
    )


# if __name__ == "__main__":
#     # Example usage:
#     #  1) Adjust symbol_csv if needed (point to your actual CSV file).
#     #  2) Set freq='1ms' or '1S' or '1Min' as desired.
#     symbol_csv_file = "symbol_AAPL.csv"
#     frequency = '1ms'  # or '1S', '100ms', etc.

#     dash_app = create_dash_app(symbol_csv_file, freq=frequency)
#     dash_app.run_server(debug=True, port=8051)
